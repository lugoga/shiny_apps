library(shiny)
library(bslib)
library(leaflet)
library(sf)
library(raster)
library(tidyverse)
library(leaflet.extras)
library(exactextractr)
library(lubridate)
library(officer)

# Function to fetch and process satellite data
fetch_satellite_data <- function(date) {
  # This is a placeholder function. In a real application, you would:
  # 1. Connect to satellite data API (e.g., NOAA, NASA)
  # 2. Download SST and Chl-a data
  # 3. Process and combine the layers
  
  # For demo, creating dummy raster data for Tanzania's coastal waters
  ext <- extent(38.8, 41.5, -11.7, -4.5)
  sst <- raster(ext, nrows=100, ncols=100)
  values(sst) <- runif(ncell(sst), 24, 28)
  
  chl <- raster(ext, nrows=100, ncols=100)
  values(chl) <- runif(ncell(chl), 0.1, 2)
  
  return(list(sst=sst, chl=chl))
}

# Function to identify PFZ
identify_pfz <- function(sst, chl, polygon) {
  # Criteria for PFZ (these are example thresholds)
  # SST: 24-28°C
  # Chl-a: 0.2-1.0 mg/m³
  
  pfz <- overlay(sst, chl, 
                 fun=function(x, y) {
                   return(x >= 24 & x <= 28 & y >= 0.2 & y <= 1.0)
                 })
  
  if (!is.null(polygon)) {
    pfz <- mask(pfz, polygon)
  }
  
  return(pfz)
}

ui <- page_sidebar(
  title = "Tanzania Potential Fishing Zone Identifier",
  sidebar = sidebar(
    dateInput("date", "Select Date:", value = Sys.Date()),
    actionButton("analyze", "Analyze PFZ", class = "btn-primary"),
    downloadButton("report", "Download Report", class = "btn-success"),
    hr(),
    HTML("<b>Instructions:</b><br>1. Select date<br>2. Draw area on map<br>3. Click Analyze PFZ")
  ),
  
  layout_columns(
    card(
      full_screen = TRUE,
      card_header("Interactive Map"),
      leafletOutput("map", height = "600px")
    ),
    card(
      card_header("PFZ Analysis Results"),
      textOutput("pfz_status"),
      verbatimTextOutput("pfz_details")
    )
  )
)

server <- function(input, output, session) {
  # Initialize reactive values
  rv <- reactiveValues(
    drawn_polygon = NULL,
    pfz_result = NULL
  )
  
  # Create base map
  output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() %>%
      addProviderTiles(providers$Esri.OceanBasemap) %>%
      setView(lng = 40, lat = -7, zoom = 6) %>%
      addDrawToolbar(
        targetGroup = "drawn",
        editOptions = editToolbarOptions(selected = TRUE),
        polylineOptions = FALSE,
        circleOptions = FALSE,
        markerOptions = FALSE,
        circleMarkerOptions = FALSE,
        rectangleOptions = TRUE,
        polygonOptions = drawPolygonOptions()
      ) %>%
      addLayersControl(overlayGroups = c("drawn", "PFZ"),
                       options = layersControlOptions(collapsed = FALSE))
  })
  
  # Capture drawn shapes
  observeEvent(input$map_draw_new_feature, {
    rv$drawn_polygon <- input$map_draw_new_feature
  })
  
  # Process data and identify PFZ when analyze button is clicked
  observeEvent(input$analyze, {
    req(rv$drawn_polygon)
    
    # Convert drawn polygon to SF object
    poly_coords <- rv$drawn_polygon$geometry$coordinates[[1]]
    poly_sf <- st_polygon(list(do.call(rbind, poly_coords))) %>%
      st_sfc(crs = 4326)
    
    # Fetch satellite data
    sat_data <- fetch_satellite_data(input$date)
    
    # Identify PFZ
    pfz <- identify_pfz(sat_data$sst, sat_data$chl, poly_sf)
    rv$pfz_result <- pfz
    
    # Calculate metrics
    pfz_area <- sum(values(pfz), na.rm = TRUE) * 1 # km² (assuming 1km resolution)
    pfz_extent <- extent(pfz)
    if (pfz_area > 0) {
      pfz_centroid <- st_centroid(st_as_sf(as(pfz, "SpatialPolygonsDataFrame")))
    }
    
    # Update map
    leafletProxy("map") %>%
      clearGroup("PFZ") %>%
      addRasterImage(pfz, colors = colorRampPalette(c("transparent", "red"))(2),
                     opacity = 0.7, group = "PFZ")
    
    # Update results
    rv$pfz_metrics <- list(
      area = pfz_area,
      extent = pfz_extent,
      centroid = if(pfz_area > 0) st_coordinates(pfz_centroid) else NULL,
      date = input$date
    )
  })
  
  # Display PFZ status
  output$pfz_status <- renderText({
    req(rv$pfz_metrics)
    if(rv$pfz_metrics$area > 0) {
      "PFZ Identified! See details below."
    } else {
      "No suitable PFZ found in selected area."
    }
  })
  
  # Display PFZ details
  output$pfz_details <- renderPrint({
    req(rv$pfz_metrics)
    cat("Date:", format(rv$pfz_metrics$date, "%d %B %Y"), "\n")
    cat("PFZ Area:", round(rv$pfz_metrics$area, 2), "km²\n")
    cat("Geographical Extent:\n")
    cat("  Longitude:", round(rv$pfz_metrics$extent@xmin, 3), "to", 
        round(rv$pfz_metrics$extent@xmax, 3), "°E\n")
    cat("  Latitude:", round(rv$pfz_metrics$extent@ymin, 3), "to",
        round(rv$pfz_metrics$extent@ymax, 3), "°N\n")
    if(!is.null(rv$pfz_metrics$centroid)) {
      cat("Centroid:\n")
      cat("  Longitude:", round(rv$pfz_metrics$centroid[1], 3), "°E\n")
      cat("  Latitude:", round(rv$pfz_metrics$centroid[2], 3), "°N\n")
    }
  })
  
  # Generate and download report
  output$report <- downloadHandler(
    filename = function() {
      paste0("PFZ_Report_", format(input$date, "%Y%m%d"), ".pdf")
    },
    content = function(file) {
      req(rv$pfz_metrics)
      
      # Create a Word document
      doc <- read_docx()
      
      # Add title
      doc <- doc %>%
        body_add_heading("Potential Fishing Zone (PFZ) Report", level = 1) %>%
        body_add_par(paste("Date:", format(rv$pfz_metrics$date, "%d %B %Y"))) %>%
        body_add_par("") %>%
        body_add_heading("Analysis Results", level = 2) %>%
        body_add_par(paste("PFZ Area:", round(rv$pfz_metrics$area, 2), "km²")) %>%
        body_add_par("Geographical Extent:") %>%
        body_add_par(paste("Longitude:", round(rv$pfz_metrics$extent@xmin, 3), "to",
                           round(rv$pfz_metrics$extent@xmax, 3), "°E")) %>%
        body_add_par(paste("Latitude:", round(rv$pfz_metrics$extent@ymin, 3), "to",
                           round(rv$pfz_metrics$extent@ymax, 3), "°N"))
      
      if(!is.null(rv$pfz_metrics$centroid)) {
        doc <- doc %>%
          body_add_par("Centroid:") %>%
          body_add_par(paste("Longitude:", round(rv$pfz_metrics$centroid[1], 3), "°E")) %>%
          body_add_par(paste("Latitude:", round(rv$pfz_metrics$centroid[2], 3), "°N"))
      }
      
      # Save the document
      print(doc, target = file)
    }
  )
}

shinyApp(ui, server)
)
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 120)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 7)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 3)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 8)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "RdBu", n = 8)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "RdBu", n = 3)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "RdBu", n = 30)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "RdBu", n = 150)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 150)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 150, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "RdBu", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world,
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world |> filter(co2_per_capita < 20),
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Change projection and colors
vmap(
data = co2_world |> filter(co2_per_capita < 30),
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Create map from sf object
vmap(co2_world)
# Draw data on the map
vmap(data = co2_world,
aes(name = name, fill = co2_per_capita)
)
# Change projection and colors
vmap(
data = co2_world |> filter(co2_per_capita < 30),
aes(name = name, fill = co2_per_capita),
projection = "equalEarth"
) |>
v_specs_colors(
range = hcl.colors(palette = "Spectral", n = 20, rev = TRUE)
) |>
v_specs_legend(
orient = "bottom",
type = "color",
field = "fill"
)
# Basic Area Chart
vchart(eco2mix) %>%
v_area(aes(date, solar))
# Basic Area Chart
vchart(
data = eco2mix, aes(date, solar)
) |>
v_area()
# Basic Area Chart
vchart(
data = eco2mix, aes(date, solar)
) |>
v_area()
# Two areas
vchart(eco2mix, aes(date)) %>%
v_area(aes(y = wind)) %>%
v_area(aes(y = solar))
# Line chart with discrete x axis
vchart(data.frame(month = month.abb, value = sample(1:50, 12))) %>%
v_area(aes(month, value))
# Fill color
vchart(data.frame(month = month.abb, value = sample(1:50, 12))) %>%
v_area(
aes(month, value),
area = list(
style = list(fill = "firebrick", fill_opacity = 0.9)
)
)
# Smooth Area Chart
vchart(data.frame(month = month.abb, value = sample(1:50, 12))) %>%
v_area(
aes(month, value),
area =  list(
style = list(curveType = "monotone")
)
)
# Step Area Chart
vchart(data.frame(month = month.abb, value = sample(1:50, 12))) %>%
v_area(
aes(month, value),
area = list(
style = list(curveType = "stepAfter")
)
)
# Multiple areas
vchart(eco2mix_long) %>%
v_area(aes(date, production, fill = source))
vchart(eco2mix_long) %>%
v_area(
aes(date, production, fill = source),
stack = TRUE,
area = list(
style = list(fillOpacity = 1)
)
)
# Range area chart
vchart(temperatures, aes(date)) %>%
v_area(aes(ymin = low, ymax = high)) %>%
v_line(aes(y = average))
# Range area chart
vchart(temperatures, aes(date)) %>%
v_area(aes(ymin = low, ymax = high)) %>%
v_line(aes(y = average))
within(temperatures, {difference = `2024` - average}) %>%
vchart(aes(date)) %>%
v_area(
aes(ymin = average, ymax = `2024`, difference = difference),
area = list(
style = list(
fill = JS(
"data => { return data.difference > 0 ? '#F68180' : '#2F64FF' ; }"
),
fillOpacity = 1
)
)
)
# Classic Bar Chart
vchart(top_generation) %>%
v_bar(aes(country, electricity_generation))
# Classic Bar Chart
vchart(top_generation) %>%
v_bar(aes(country, electricity_generation))
# Horizontal Bar Chart
vchart(top_generation) %>%
v_bar(aes(country, electricity_generation), direction = "horizontal")
# Grouped Bar Chart
vchart(subset(world_electricity, type == "total")) %>%
v_bar(aes(year, generation, fill = source))
# Horizontal Grouped Bar Chart
vchart(subset(world_electricity, type == "total")) %>%
v_bar(aes(year, generation, fill = source), direction = "horizontal")
# Stacked Bar Chart
vchart(subset(world_electricity, type == "total")) %>%
v_bar(aes(year, generation, fill = source), stack = TRUE)
# Percentage Stacked Bar Chart
vchart(subset(world_electricity, type == "total")) %>%
v_bar(aes(year, generation, fill = source), stack = TRUE, percent = TRUE)
data("penguins", package = "palmerpenguins")
vchart(penguins) %>%
v_boxplot(aes(species, flipper_length_mm))
vchart(penguins) %>%
v_boxplot(aes(species, flipper_length_mm, color = sex))
data("mpg", package = "ggplot2")
vchart(mpg) %>%
v_boxplot(aes(as.character(year), hwy))
vchart(mpg) %>%
v_boxplot(aes(class, hwy))
vchart(mpg) %>%
v_boxplot(aes(class, hwy, color = as.character(year)))
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD)
)
# With root level
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD),
use_root = "World"
)
# Custom colors
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD)
) %>%
v_scale_color_manual(c(
Oceania = "#E6AB02",
Africa = "#1B9E77",
Americas = "#D95F02",
Asia = "#E7298A",
Europe = "#66A61E",
Antarctica = "#7570B3"
))
# Bubble Chart
vchart(countries_gdp) %>%
v_circlepacking(
aes(ADMIN, GDP_MD),
label_visible = JS("d => d.value > 261921;"), # 261921 = 3rd Qu.
)
countries_gdp
# Bubble Chart
vchart(data = countries_gdp,  aes(ADMIN, GDP_MD)) %>%
v_circlepacking(label_visible = JS("d => d.value > 261921;"), # 261921 = 3rd Qu.
)
# Custom colors
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD)
) %>%
v_scale_color_manual(c(
Oceania = "#E6AB02",
Africa = "#1B9E77",
Americas = "#D95F02",
Asia = "#E7298A",
Europe = "#66A61E",
Antarctica = "#7570B3"
))
# With root level
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD),
use_root = "World"
)
# Bubble Chart
vchart(data = countries_gdp,  aes(ADMIN, GDP_MD)) %>%
v_circlepacking(label_visible = JS("d => d.value > 261921;"), # 261921 = 3rd Qu.
)
spData::world
spData::world |>
as.data.frame()
spData::world |>
st_drop_geometry ()
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa")
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(aes(name_long,gdpPercap))
# Custom colors
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD)
) %>%
v_scale_color_manual(c(
Oceania = "#E6AB02",
Africa = "#1B9E77",
Americas = "#D95F02",
Asia = "#E7298A",
Europe = "#66A61E",
Antarctica = "#7570B3"
))
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa")
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
aes(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap)
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart()
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap)
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa")
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(aes(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap))
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(aes(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap))
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(aes(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap)) |>
v_circlepacking()
spData::world |>
st_drop_geometry ()  |>
filter(continent == "Africa") |>
vchart(aes(lvl1 = subregion, lvl2 = name_long, lvl3 = type, value = gdpPercap)) |>
v_circlepacking()
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD)
)
# With root level
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD),
use_root = "World"
# With root level
vchart(countries_gdp) %>%
v_circlepacking(
aes(lvl1 = REGION_UN, lvl2 = SUBREGION, lvl3 = ADMIN, value = GDP_MD),
use_root = "World"
)
vchart(top_generation) %>%
v_bar(aes(country, electricity_generation)) %>%
v_event(
name = "click",
params = list(level = "mark", type = "bar"),
fun = JS(
"e => {",
" console.log(e);",
" alert(e.datum.x);",
"}"
)
)
library(shiny); runApp('weather.R')
require(tidyverse)
tibble(~region,~lon,~lat)
tribble(~region,~lon,~lat)
tribble(~region,~lon,~lat, "Dar", NA,NA)
tribble(~region,~lon,~lat, "Dar", NA,NA, "MWanza", ", ")
tribble(~region,~lon,~lat, "Dar", NA,NA, "MWanza", "","")
runApp('weather.R')
qrcode::qr_code("https://bionutra.shinyapps.io/yerp/")
qrcode::qr_code("https://bionutra.shinyapps.io/yerp/") |> qrcode::generate_svg(foreground = "#013914", background = "#D9FDD3", filename = "yerp.svg", show = TRUE)
qrcode::qr_code("https://bionutra.shinyapps.io/yerp/") |> qrcode::generate_svg(foreground = "#013914", background = "#D9FDD3", filename = "bionutra/yerp/yerp.svg", show = TRUE)
runApp('fims.R')
